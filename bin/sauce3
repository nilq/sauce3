#!/usr/bin/env lua

local cfg = require("luarocks.cfg")
local fs = require("luarocks.fs")
local workingPath = fs.current_dir().."/"
local enginePath = debug.getinfo(1,"S").source:match("(.*/)"):sub(2, -5)
local gradlew = cfg.platforms.windows and "gradlew" or "./gradlew"
local tempPath = ".sauce3/"
local configFile = "project.yml"
local needsClean = false

local function copy(source, dest)
  local src = enginePath..source
  local dst = workingPath..dest

  if fs.is_dir(src) then
    fs.make_dir(dst)
    fs.copy_contents(src, dst)
  else
    fs.copy(src, dst)
  end
end

local function exec(args, quiet)
  if (needsClean) then
    args = "clean "..args
    needsClean = false
  end

  fs.change_dir(workingPath..tempPath)
  if quiet then
    fs.execute_quiet(gradlew.." "..args)
  else
    fs.execute(gradlew.." "..args)
  end
end

local function mkex(file)
  fs.chmod(workingPath..file, "777")
end

local function read(file)
  local f = io.open(file, "rb")
  local content = f:read("*all")
  f:close()
  return content
end

local function version()
  return read(enginePath.."core/VERSION")
end

local function check(msg, normal)
  if arg[1] ~= "new" and not fs.exists(workingPath..configFile) then
    print("No project found.")
    os.exit(-1)
  end

  if arg[1] == "new" and fs.exists(workingPath..configFile) then
    print("Project already exists.")
    os.exit(-1)
  end

  if not normal then
    msg = msg:upper()
  end

  print(msg)

  if fs.exists(workingPath..tempPath) then
    return
  end

  copy("core", tempPath)
  copy("res", tempPath.."res")
  copy("src/build/classes", tempPath.."shared/precompiled")
  mkex(tempPath.."gradlew")
  mkex(tempPath.."shared/precompile")
  needsClean = true
end

local function help()
  print("Commands:");
  print("  sauce3 new PROJECT           # initializes new project")
  print("  sauce3 run PLATFORM          # start your project")
  print("  sauce3 build BUILD_PLATFORM  # build your project")
  print("  sauce3 clean                 # clean temporary data for your project")
  print("  sauce3 update                # update your project's runtime version and dependencies")
  print("  sauce3 forceupdate           # force update your project's runtime version and dependencies")
  print("  sauce3 version               # print current compiler version")
  print("")
  print("PROJECT can be any string (default 'My Project')")
  print("PLATFORM can be 'desktop', 'android' or 'ios' (default 'desktop')")
  print("BUILD_PLATFORM can be 'desktop', 'android' 'ios', 'windows', 'linux', 'mac' (default 'desktop')")
  os.exit(-1)
end

if arg[1] == "build" then
  check("Building your project")

  if #arg < 2 or arg[2] == "desktop" then
    exec("update updateDesktop desktop:dist")
  elseif arg[2] == "android" then
    exec("update updateAndroid android:dist")
  elseif arg[2] == "ios" then
    exec("update updateIOS ios:dist")
  elseif arg[2] == "windows" then
    exec("update updateDesktop desktop:dist desktop:windows")
  elseif arg[2] == "linux" then
    exec("update updateDesktop desktop:dist desktop:linux")
  elseif arg[2] == "mac" then
    exec("update updateDesktop desktop:dist desktop:mac")
  else
    help()
  end
elseif arg[1] == "run" then
  check("Starting your project")

  if #arg < 2 or arg[2] == "desktop" then
    exec("update updateDesktop desktop:run")
  elseif arg[2] == "android" then
    exec("update updateAndroid android:run")
  elseif arg[2] == "ios" then
    exec("update updateIOS ios:run")
  else
    help()
  end
elseif arg[1] == "new" then
  check("Creating new project")
  local projname = "My Project"

  if #arg > 1 then
    projname = arg[2]
  end

  exec("init -PinitName=\""..projname.."\"")
elseif arg[1] == "clean" then
  check("Cleaning your project's temporary data")
  exec("clean")
elseif arg[1] == "update" then
  check("Updating your project's runtime")
  local projversion = read(workingPath..tempPath.."VERSION")
  local curversion = version()

  if not curversion == projversion then
    fs.delete(workingPath..tempPath)
    check("Updating your project's runtime to "..curversion, true)
  else
    print("You are using latest runtime.")
  end
elseif arg[1] == "forceupdate" then
  fs.delete(workingPath..tempPath)
  check("Updating your project's runtime")
elseif arg[1] == "version" then
  print(version())
else
  help()
end
